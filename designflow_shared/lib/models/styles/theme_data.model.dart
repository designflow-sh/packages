import 'package:designflow_shared/designflow_shared.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

part 'theme_data.model.freezed.dart';
part 'theme_data.model.g.dart';

@freezed
class CThemeData with _$CThemeData {
  const factory CThemeData({
    required String id,
    required String name,
    String? description,
    required ColorStyle primary,
    required ColorStyle onPrimary,
    required ColorStyle secondary,
    required ColorStyle onSecondary,
    required ColorStyle tertiary,
    required ColorStyle onTertiary,
    required ColorStyle error,
    required ColorStyle onError,
    required ColorStyle primaryContainer,
    required ColorStyle onPrimaryContainer,
    required ColorStyle secondaryContainer,
    required ColorStyle onSecondaryContainer,
    required ColorStyle tertiaryContainer,
    required ColorStyle onTertiaryContainer,
    required ColorStyle errorContainer,
    required ColorStyle onErrorContainer,
    required ColorStyle surfaceDim,
    required ColorStyle surface,
    required ColorStyle surfaceBright,
    required ColorStyle surfaceContainerLowest,
    required ColorStyle surfaceContainerLow,
    required ColorStyle surfaceContainer,
    required ColorStyle surfaceContainerHigh,
    required ColorStyle surfaceContainerHighest,
    required ColorStyle onSurface,
    required ColorStyle onSurfaceVariant,
    required ColorStyle outline,
    required ColorStyle outlineVariant,
    required ColorStyle inverseSurface,
    required ColorStyle inverseOnSurface,
    required ColorStyle inversePrimary,
    required ColorStyle scrim,
    required ColorStyle shadow,
    required Map<String, ColorStyle> customColorStyles,
    required CTextStyle displayLarge,
    required CTextStyle displayMedium,
    required CTextStyle displaySmall,
    required CTextStyle headlineLarge,
    required CTextStyle headlineMedium,
    required CTextStyle headlineSmall,
    required CTextStyle titleLarge,
    required CTextStyle titleMedium,
    required CTextStyle titleSmall,
    required CTextStyle bodyLarge,
    required CTextStyle bodyMedium,
    required CTextStyle bodySmall,
    required CTextStyle captionLarge,
    required CTextStyle captionMedium,
    required CTextStyle captionSmall,
    required Map<String, CTextStyle> customTextStyles,
  }) = _ThemeData;
  const CThemeData._();

  factory CThemeData.fromJson(Map<String, dynamic> json) =>
      _$CThemeDataFromJson(json);

  Map<String, ColorStyle> get colors => {
        primary.id: primary,
        onPrimary.id: onPrimary,
        secondary.id: secondary,
        onSecondary.id: onSecondary,
        tertiary.id: tertiary,
        onTertiary.id: onTertiary,
        error.id: error,
        onError.id: onError,
        primaryContainer.id: primaryContainer,
        onPrimaryContainer.id: onPrimaryContainer,
        secondaryContainer.id: secondaryContainer,
        onSecondaryContainer.id: onSecondaryContainer,
        tertiaryContainer.id: tertiaryContainer,
        onTertiaryContainer.id: onTertiaryContainer,
        errorContainer.id: errorContainer,
        onErrorContainer.id: onErrorContainer,
        surfaceDim.id: surfaceDim,
        surface.id: surface,
        surfaceBright.id: surfaceBright,
        surfaceContainerLowest.id: surfaceContainerLowest,
        surfaceContainerLow.id: surfaceContainerLow,
        surfaceContainer.id: surfaceContainer,
        surfaceContainerHigh.id: surfaceContainerHigh,
        surfaceContainerHighest.id: surfaceContainerHighest,
        onSurface.id: onSurface,
        onSurfaceVariant.id: onSurfaceVariant,
        outline.id: outline,
        outlineVariant.id: outlineVariant,
        inverseSurface.id: inverseSurface,
        inverseOnSurface.id: inverseOnSurface,
        inversePrimary.id: inversePrimary,
        scrim.id: scrim,
        shadow.id: shadow,
        ...customColorStyles,
      };
}
